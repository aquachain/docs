{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"see user-guide","title":"Home"},{"location":"about-aquachain/Basics/","text":"Aquachain What is Aquachain? Aquachain is a distributed computing platform based on proof of work chain technology. Its not a company, and there was no ICO, no pre-mine, no dev fund, no pre-sale, etc. Transactions, once mined, are irreversible and uncensorable. It is not an ERC20/Dex platform. Aquachain is the blockchain, AQUA is the fuel. You need AQUA to create and interact with contracts, store data, and to send transactions (as a tx fee). Symbol: \u023a or AQUA Difficulty: 240 seconds (4 minutes) Hashing Algorithm: ethash/argon2id Difficulty Readjust: Every block Coin reward: 1 Max Supply: ~42mil Chain ID: 61717561 Bitcointalk ANN 2018: https://bitcointalk.org/index.php?topic=3138231 User Manual This page is able to be edited by anyone. You are invited to collaborate to improve this documentation. Wallet / Console Help See Wallet Mining See Mining Help Telegram Discord","title":"Aquachain"},{"location":"about-aquachain/Basics/#aquachain","text":"","title":"Aquachain"},{"location":"about-aquachain/Basics/#what-is-aquachain","text":"Aquachain is a distributed computing platform based on proof of work chain technology. Its not a company, and there was no ICO, no pre-mine, no dev fund, no pre-sale, etc. Transactions, once mined, are irreversible and uncensorable. It is not an ERC20/Dex platform. Aquachain is the blockchain, AQUA is the fuel. You need AQUA to create and interact with contracts, store data, and to send transactions (as a tx fee). Symbol: \u023a or AQUA Difficulty: 240 seconds (4 minutes) Hashing Algorithm: ethash/argon2id Difficulty Readjust: Every block Coin reward: 1 Max Supply: ~42mil Chain ID: 61717561 Bitcointalk ANN 2018: https://bitcointalk.org/index.php?topic=3138231","title":"What is Aquachain?"},{"location":"about-aquachain/Basics/#user-manual","text":"This page is able to be edited by anyone. You are invited to collaborate to improve this documentation.","title":"User Manual"},{"location":"about-aquachain/Basics/#wallet-console-help","text":"See Wallet","title":"Wallet / Console Help"},{"location":"about-aquachain/Basics/#mining","text":"See Mining","title":"Mining"},{"location":"about-aquachain/Basics/#help","text":"Telegram Discord","title":"Help"},{"location":"node-operator-guide/ConsoleCheatcheat/","text":"Console Cheatsheet Node Operators read aquachain help to see all flags use aquachain [your flags] dumpconfig > /tmp/aqua.config to create a new config that shows additional options. make sure you somehow send SIGINT to your aquachain node before system shutdown. otherwise, your node will have to resync a number of blocks. with your node running, even without -rpc flag, you can run aquachain attach and connect to your instance through ipc socket. here are some useful snippets // use now() anywhere you need a timestamp now = function () { return Math.floor(new Date().getTime() / 1000)} // for example exporting chain to a timestamped file admin.exportChain('aquachain-bootstrap'+now()+'.dat') Mining Node Operators sometimes you'd like to change something without restarting the server // change minimum gas price for inclusion (local txs can still be 0) // use -gasprice flag, example 1000000000 miner.setGasPrice(web3.toWei(1, 'gwei')) // change the extradata included in block // use -extra flag miner.setExtra(\"hello world\")","title":"Console Cheatsheet"},{"location":"node-operator-guide/ConsoleCheatcheat/#console-cheatsheet","text":"","title":"Console Cheatsheet"},{"location":"node-operator-guide/ConsoleCheatcheat/#node-operators","text":"read aquachain help to see all flags use aquachain [your flags] dumpconfig > /tmp/aqua.config to create a new config that shows additional options. make sure you somehow send SIGINT to your aquachain node before system shutdown. otherwise, your node will have to resync a number of blocks. with your node running, even without -rpc flag, you can run aquachain attach and connect to your instance through ipc socket. here are some useful snippets // use now() anywhere you need a timestamp now = function () { return Math.floor(new Date().getTime() / 1000)} // for example exporting chain to a timestamped file admin.exportChain('aquachain-bootstrap'+now()+'.dat')","title":"Node Operators"},{"location":"node-operator-guide/ConsoleCheatcheat/#mining-node-operators","text":"sometimes you'd like to change something without restarting the server // change minimum gas price for inclusion (local txs can still be 0) // use -gasprice flag, example 1000000000 miner.setGasPrice(web3.toWei(1, 'gwei')) // change the extradata included in block // use -extra flag miner.setExtra(\"hello world\")","title":"Mining Node Operators"},{"location":"node-operator-guide/FullNode/","text":"How to run an archive node Estimated time: 10-60 minutes depending on hardware and network connection. If starting from a fresh unsynced node , simply run the aquachain node with -gcmode archive flag. If your node is already synchronized , you will need to re-sync the entire chain in archive mode. To complete this step offline, you can export the chain to a file and clear the node's mainnet database, then import that file. aquachain export aqua-mainnet.dat and then aquachain removedb Run aquachain -gcmode archive import mainnet.dat Now, run aquachain with -gcmode archive flag.","title":"How to run an archive node"},{"location":"node-operator-guide/FullNode/#how-to-run-an-archive-node","text":"Estimated time: 10-60 minutes depending on hardware and network connection. If starting from a fresh unsynced node , simply run the aquachain node with -gcmode archive flag. If your node is already synchronized , you will need to re-sync the entire chain in archive mode. To complete this step offline, you can export the chain to a file and clear the node's mainnet database, then import that file. aquachain export aqua-mainnet.dat and then aquachain removedb Run aquachain -gcmode archive import mainnet.dat Now, run aquachain with -gcmode archive flag.","title":"How to run an archive node"},{"location":"node-operator-guide/Node-Basics/","text":"Full Node First Boot To get started, build (see Compiling ) or download the latest release only from https://github.com/aquachain/aquachain/releases Unzip the archive, and double click the aquachain.exe application to open the javascript console. When you open the program, you immediately start finding nodes and synchronizing with the network. It should take under 1 hour to sync the entire chain at this time. Startup Options Some times you might need to start aquachain with a certain command, or flags. Here we say aquachain.exe but if you are on linux, use aquachain . Example command arguments aquachain.exe -rpc -rpccorsdomain '*' # serve 127.0.0.1:8543 rpc server aquachain.exe -rpc daemon # rpc, no console aquachain.exe account new # create new json keyfile aquachain.exe -h # show help aquachain.exe version # show version aquachain.exe removedb # delete blockchain (keeping private keys) aquachain.exe -your-flags dumpconfig > my.aqua.config.toml aquachain.exe -config my.aqua.config.toml aquachain.exe paper 10 ## generates ten addresses aquachain.exe paper -vanity 123 10 ## generates ten addresses beginning with 0x123 Disabling P2P To disable p2p and discovery, use the -offline flag. This is useful if you just want to use the AQUA Console to analyze your current blockchain status, or sign raw transactions offline. Aquachain Console You know if you are in the aquachain console if you see the AQUA> prompt. It is a (basic) javascript console, with (tab) auto-complete and (up/down) command history. Load a local script with the loadScript('filename') function. List accounts with aqua.accounts Check all balances with balance()","title":"Full Node"},{"location":"node-operator-guide/Node-Basics/#full-node","text":"","title":"Full Node"},{"location":"node-operator-guide/Node-Basics/#first-boot","text":"To get started, build (see Compiling ) or download the latest release only from https://github.com/aquachain/aquachain/releases Unzip the archive, and double click the aquachain.exe application to open the javascript console. When you open the program, you immediately start finding nodes and synchronizing with the network. It should take under 1 hour to sync the entire chain at this time.","title":"First Boot"},{"location":"node-operator-guide/Node-Basics/#startup-options","text":"Some times you might need to start aquachain with a certain command, or flags. Here we say aquachain.exe but if you are on linux, use aquachain .","title":"Startup Options"},{"location":"node-operator-guide/Node-Basics/#example-command-arguments","text":"aquachain.exe -rpc -rpccorsdomain '*' # serve 127.0.0.1:8543 rpc server aquachain.exe -rpc daemon # rpc, no console aquachain.exe account new # create new json keyfile aquachain.exe -h # show help aquachain.exe version # show version aquachain.exe removedb # delete blockchain (keeping private keys) aquachain.exe -your-flags dumpconfig > my.aqua.config.toml aquachain.exe -config my.aqua.config.toml aquachain.exe paper 10 ## generates ten addresses aquachain.exe paper -vanity 123 10 ## generates ten addresses beginning with 0x123","title":"Example command arguments"},{"location":"node-operator-guide/Node-Basics/#disabling-p2p","text":"To disable p2p and discovery, use the -offline flag. This is useful if you just want to use the AQUA Console to analyze your current blockchain status, or sign raw transactions offline.","title":"Disabling P2P"},{"location":"node-operator-guide/Node-Basics/#aquachain-console","text":"You know if you are in the aquachain console if you see the AQUA> prompt. It is a (basic) javascript console, with (tab) auto-complete and (up/down) command history. Load a local script with the loadScript('filename') function. List accounts with aqua.accounts Check all balances with balance()","title":"Aquachain Console"},{"location":"node-operator-guide/how-to-public-rpc/","text":"How to Host a Public RPC To set up a private RPC, run with -rpc flag. To set up a public RPC, follow this guide. About Public RPC Nodes The network is able to function without any public RPC nodes, but they add convenience to end-users. What they do is provide a JSON RPC over HTTP(s). Applications such as explorers and wallets can use public RPCs to fetch data and submit transactions. Public RPC Nodes do not need any private keys. They should not be on the same machine as private keys. Currently, the aquachain command doesn't use TLS/HTTPS to provide a secure RPC. For now, it is necessary to use a reverse proxy for this purpose. The setup Here is one of many setups that can provide a public https endpoint, offering a public RPC for the world to use. For SSL (recommended), setup your subdomain DNS to your IP, before this. It is recommended to use a machine with 2GB or more RAM. Need at least 50GB disk space, recommended SSD but not necessary. Preferably a dedicated machine, such as a VPS with no other uses. A newer version of caddy or go may have arrived since this was published. You can follow this guide which uses a fresh VPS. The OS is Ubuntu. All commands as root user... lets go! # add users adduser --system aqua adduser --system caddy # install go (can skip if download aquachain binary) mkdir -p /root/dl cd /root/dl wget -4 'https://golang.org/dl/go1.15.6.linux-amd64.tar.gz' tar xvf go1.15.6*.tar.gz -C /usr/local/ ln -s /usr/local/go/bin/* /usr/local/bin/ # install caddy (reverse proxy, ssl, web server) cd /root/dl wget -4 -O /usr/local/bin/caddy 'https://caddyserver.com/api/download?os=linux&arch=amd64' chmod +x /usr/local/bin/caddy setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/caddy # setup clean reboots for database health wget -4 -O /etc/rc0.d/K01aquachain https://github.com/aquachain/aquachain/raw/master/contrib/K01aquachain chmod +x /etc/rc0.d/K01aquachain # setup aquachain rpc cd /home/aqua sudo -u aqua git clone https://gitlab.com/aquachain/aquachain src/aquachain cd src/aquachain sudo -u aqua make mv /home/aqua/src/aquachain/bin/aquachain /usr/local/bin/aquachain # setup aqua reboot cat <<EOF >/home/aqua/reboot.bash #!/bin/bash TERM=xterm # can modify these for example --config or something AQUAFLAGS=\"-nokeys -gcmode archive -rpc -rpccorsdomain='*' -rpcvhosts='*'\" tmux new-session -n aqua -d /usr/local/bin/aquachain $AQUAFLAGS EOF chmod +x /home/aqua/reboot.bash echo '@reboot bash /home/aqua/reboot.bash' | crontab -u aqua # setup caddy reverse proxy cd /home/caddy wget -4 https://github.com/aquachain/aquachain/raw/master/contrib/Caddyfile echo \"/usr/local/bin/caddy start\" >> /home/caddy/reboot.bash chmod +x /home/caddy/reboot.bash echo '@reboot bash /home/caddy/reboot.bash' | crontab -u caddy Now customize the Caddyfile with your domain name Don't forget to edit /home/caddy/Caddyfile and replace the dummy domain name. Putting it all together Now you have a machine that will automatically launch caddy and aquachain, accepting secure requests from anyone on the internet. The machine has no keys, never uses keys, never signs anything. If this is all you are using the server for, you are probably done with your setup. Restart the VPS machine. (as root, reboot ) Open up a terminal and run: aquachain attach https://mydomain.examplename Use your domain name instead of the dummy name. If you get an AQUA console, you have achieved your goal, a public https rpc server..","title":"How to Host a Public RPC"},{"location":"node-operator-guide/how-to-public-rpc/#how-to-host-a-public-rpc","text":"To set up a private RPC, run with -rpc flag. To set up a public RPC, follow this guide.","title":"How to Host a Public RPC"},{"location":"node-operator-guide/how-to-public-rpc/#about-public-rpc-nodes","text":"The network is able to function without any public RPC nodes, but they add convenience to end-users. What they do is provide a JSON RPC over HTTP(s). Applications such as explorers and wallets can use public RPCs to fetch data and submit transactions. Public RPC Nodes do not need any private keys. They should not be on the same machine as private keys. Currently, the aquachain command doesn't use TLS/HTTPS to provide a secure RPC. For now, it is necessary to use a reverse proxy for this purpose.","title":"About Public RPC Nodes"},{"location":"node-operator-guide/how-to-public-rpc/#the-setup","text":"Here is one of many setups that can provide a public https endpoint, offering a public RPC for the world to use. For SSL (recommended), setup your subdomain DNS to your IP, before this. It is recommended to use a machine with 2GB or more RAM. Need at least 50GB disk space, recommended SSD but not necessary. Preferably a dedicated machine, such as a VPS with no other uses. A newer version of caddy or go may have arrived since this was published. You can follow this guide which uses a fresh VPS. The OS is Ubuntu. All commands as root user... lets go! # add users adduser --system aqua adduser --system caddy # install go (can skip if download aquachain binary) mkdir -p /root/dl cd /root/dl wget -4 'https://golang.org/dl/go1.15.6.linux-amd64.tar.gz' tar xvf go1.15.6*.tar.gz -C /usr/local/ ln -s /usr/local/go/bin/* /usr/local/bin/ # install caddy (reverse proxy, ssl, web server) cd /root/dl wget -4 -O /usr/local/bin/caddy 'https://caddyserver.com/api/download?os=linux&arch=amd64' chmod +x /usr/local/bin/caddy setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/caddy # setup clean reboots for database health wget -4 -O /etc/rc0.d/K01aquachain https://github.com/aquachain/aquachain/raw/master/contrib/K01aquachain chmod +x /etc/rc0.d/K01aquachain # setup aquachain rpc cd /home/aqua sudo -u aqua git clone https://gitlab.com/aquachain/aquachain src/aquachain cd src/aquachain sudo -u aqua make mv /home/aqua/src/aquachain/bin/aquachain /usr/local/bin/aquachain # setup aqua reboot cat <<EOF >/home/aqua/reboot.bash #!/bin/bash TERM=xterm # can modify these for example --config or something AQUAFLAGS=\"-nokeys -gcmode archive -rpc -rpccorsdomain='*' -rpcvhosts='*'\" tmux new-session -n aqua -d /usr/local/bin/aquachain $AQUAFLAGS EOF chmod +x /home/aqua/reboot.bash echo '@reboot bash /home/aqua/reboot.bash' | crontab -u aqua # setup caddy reverse proxy cd /home/caddy wget -4 https://github.com/aquachain/aquachain/raw/master/contrib/Caddyfile echo \"/usr/local/bin/caddy start\" >> /home/caddy/reboot.bash chmod +x /home/caddy/reboot.bash echo '@reboot bash /home/caddy/reboot.bash' | crontab -u caddy","title":"The setup"},{"location":"node-operator-guide/how-to-public-rpc/#now-customize-the-caddyfile-with-your-domain-name","text":"Don't forget to edit /home/caddy/Caddyfile and replace the dummy domain name.","title":"Now customize the Caddyfile with your domain name"},{"location":"node-operator-guide/how-to-public-rpc/#putting-it-all-together","text":"Now you have a machine that will automatically launch caddy and aquachain, accepting secure requests from anyone on the internet. The machine has no keys, never uses keys, never signs anything. If this is all you are using the server for, you are probably done with your setup. Restart the VPS machine. (as root, reboot ) Open up a terminal and run: aquachain attach https://mydomain.examplename Use your domain name instead of the dummy name. If you get an AQUA console, you have achieved your goal, a public https rpc server..","title":"Putting it all together"},{"location":"user-guide/Compiling/","text":"Building from the source You will need the latest version of the Go programming language. Here we are using go1.19.2, there is likely a newer version of go , use that instead. Installing Go on Linux wget https://go.dev/dl/go1.19.2.linux-amd64.tar.gz sudo tar xvaf go1.19.2.linux-amd64.tar.gz -C /usr/local/ sudo ln /usr/local/go/bin/go* /usr/local/bin/ Installing Go on Apple macOS wget https://go.dev/dl/go1.19.2.darwin-amd64.tar.gz sudo tar xvaf go1.19.2.darwin-amd64.tar.gz -C /usr/local/ sudo ln /usr/local/go/bin/go* /usr/local/bin/ Checking Go version which go go version Downloading The Source git clone https://gitlab.com/aquachain/aquachain cd aquachain Compiling In the base directory of the repository, you can run a variety of 'make' targets. When finished compiling, they are in the ./bin directory. build the Aquachain command (p2p node, rpc server) make it should pop out as ./bin/aquachain or ./bin/aquachain.exe if on windows. Customized Build or build any of the available targets all crossold goget race bin/ default hash release bootnode devtools help release/ checkrelease docs install test clean echoflags linter cross generate package Cross Compilation This is how releases can be made, using pure Go toolchain and no C dependencies. make clean release release=1 Contributing If you are contributing, you will want to 'fork' the main repo on github, and add your fork like so, changing your-name and patch-1 to whatever you need: git remote add fork git@github.com:yourname/aquachain.git git checkout -b patch-1 When done making commits, use git push fork patch-1 and either open a pull request or ask to merge. During development on your branch there may be many commits on the master branch. You can re-synchronize by using git pull -r origin master or git rebase -i to avoid needing Merge commits .","title":"Building from the source"},{"location":"user-guide/Compiling/#building-from-the-source","text":"You will need the latest version of the Go programming language. Here we are using go1.19.2, there is likely a newer version of go , use that instead.","title":"Building from the source"},{"location":"user-guide/Compiling/#installing-go-on-linux","text":"wget https://go.dev/dl/go1.19.2.linux-amd64.tar.gz sudo tar xvaf go1.19.2.linux-amd64.tar.gz -C /usr/local/ sudo ln /usr/local/go/bin/go* /usr/local/bin/","title":"Installing Go on Linux"},{"location":"user-guide/Compiling/#installing-go-on-apple-macos","text":"wget https://go.dev/dl/go1.19.2.darwin-amd64.tar.gz sudo tar xvaf go1.19.2.darwin-amd64.tar.gz -C /usr/local/ sudo ln /usr/local/go/bin/go* /usr/local/bin/","title":"Installing Go on Apple macOS"},{"location":"user-guide/Compiling/#checking-go-version","text":"which go go version","title":"Checking Go version"},{"location":"user-guide/Compiling/#downloading-the-source","text":"git clone https://gitlab.com/aquachain/aquachain cd aquachain","title":"Downloading The Source"},{"location":"user-guide/Compiling/#compiling","text":"In the base directory of the repository, you can run a variety of 'make' targets. When finished compiling, they are in the ./bin directory. build the Aquachain command (p2p node, rpc server) make it should pop out as ./bin/aquachain or ./bin/aquachain.exe if on windows.","title":"Compiling"},{"location":"user-guide/Compiling/#customized-build","text":"or build any of the available targets all crossold goget race bin/ default hash release bootnode devtools help release/ checkrelease docs install test clean echoflags linter cross generate package","title":"Customized Build"},{"location":"user-guide/Compiling/#cross-compilation","text":"This is how releases can be made, using pure Go toolchain and no C dependencies. make clean release release=1","title":"Cross Compilation"},{"location":"user-guide/Compiling/#contributing","text":"If you are contributing, you will want to 'fork' the main repo on github, and add your fork like so, changing your-name and patch-1 to whatever you need: git remote add fork git@github.com:yourname/aquachain.git git checkout -b patch-1 When done making commits, use git push fork patch-1 and either open a pull request or ask to merge. During development on your branch there may be many commits on the master branch. You can re-synchronize by using git pull -r origin master or git rebase -i to avoid needing Merge commits .","title":"Contributing"},{"location":"user-guide/Metamask/","text":"Quick: Connect Metamask or Web3 Wallet Use metamask \"Add Network\" with chainId 61717561 with your RPC url of choice. If you don't have an RPC server of your own, you can use a public RPC server such as: https://c.onical.org Some wallets allow you to customize the explorer URL, if that is the case use https://aquachain.github.io/explorer/#/ Note: Metamask users should use AQUAC as the 'symbol' for Aquachain. This will fix an issue with fetching fiat prices in the background it seems. Image Icon: https://aquachain.github.io/img/aqua-icon.svg or png: https://aquachain.github.io/img/aqua-icon-200.png","title":"Quick: Connect Metamask or Web3 Wallet"},{"location":"user-guide/Metamask/#quick-connect-metamask-or-web3-wallet","text":"Use metamask \"Add Network\" with chainId 61717561 with your RPC url of choice. If you don't have an RPC server of your own, you can use a public RPC server such as: https://c.onical.org Some wallets allow you to customize the explorer URL, if that is the case use https://aquachain.github.io/explorer/#/ Note: Metamask users should use AQUAC as the 'symbol' for Aquachain. This will fix an issue with fetching fiat prices in the background it seems. Image Icon: https://aquachain.github.io/img/aqua-icon.svg or png: https://aquachain.github.io/img/aqua-icon-200.png","title":"Quick: Connect Metamask or Web3 Wallet"},{"location":"user-guide/Smart-Contracts/","text":"Smart Contracts Something that sets Aquachain apart from other cryptocurrency is that we are able to write programs that exist on our blockchain. AQUA uses the same stack based VM as Ethereum, and is compatible with all ETH smart contracts. The use of tokens are discouraged. Think bigger. There are some legitimate use-cases for the ERC20 standard, but for Aquachain, the ERC721 standard makes more sense to deploy. Important: When deploying, use \"Byzantium\" EVM Target and Optimize code so it fits in the block. Some opcodes do not exist here, such as CHAINID and CREATE2, and if your contract depends on these you must modify them. Simple Example Below is an example contract deployed on the aquachain at 0xF179C8ec4cE31d8B9f16fA12c88A6091fD06d62a Copy paste this in your browser for live demo (see Return Data: uint256): https://aquachain.github.io/explorer/#/contract/0xF179C8ec4cE31d8B9f16fA12c88A6091fD06d62a/double(int256)/100 It is a simple contract that demonstrates two things: Writing a contract is easy. Just send a transaction containing Data, with no recipient. Add some fuel, and wooo! It's deployed. aqua.sendTransaction({from:aqua.coinbase,data:'6060604052341561000f57600080fd5b60b18061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636ffa1caa146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60008160020290509190505600a165627a7a723058208aa56e39b6d6a9caab4b9a9dc5241ea1c56dd40cf77f1c1e66af80c59fef24640029'}) Writing a secure contract is not easy. Here is a dangerous overflow : (Input: 9999999999999999999999999999999999999999999999999999999999999999999999999999 returns -95792089237316195423570985008687907853269984665640564039457584007913129639938 Source Code The following is buggy code The above contract was made with solidity language, compiled on the Remix browser compiler. pragma solidity ^0.4.18; contract Double { function double(int a) public pure returns(int) { return 2*a;} // buggy } using solc or Remix browser compiler, compiles to bytecode , which is sent in a transaction in the data field (no \"to\" field, or \"zero address\"): 6060604052341561000f57600080fd5b60b18061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636ffa1caa146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60008160020290509190505600a165627a7a723058208aa56e39b6d6a9caab4b9a9dc5241ea1c56dd40cf77f1c1e66af80c59fef24640029 and an ABI, to let us know what functions are available. in this case, double(int256) that returns an int256 [ { \"constant\": true, \"inputs\": [ { \"name\": \"a\", \"type\": \"int256\" } ], \"name\": \"double\", \"outputs\": [ { \"name\": \"\", \"type\": \"int256\" } ], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\" } ]","title":"Smart Contracts"},{"location":"user-guide/Smart-Contracts/#smart-contracts","text":"Something that sets Aquachain apart from other cryptocurrency is that we are able to write programs that exist on our blockchain. AQUA uses the same stack based VM as Ethereum, and is compatible with all ETH smart contracts. The use of tokens are discouraged. Think bigger. There are some legitimate use-cases for the ERC20 standard, but for Aquachain, the ERC721 standard makes more sense to deploy. Important: When deploying, use \"Byzantium\" EVM Target and Optimize code so it fits in the block. Some opcodes do not exist here, such as CHAINID and CREATE2, and if your contract depends on these you must modify them.","title":"Smart Contracts"},{"location":"user-guide/Smart-Contracts/#simple-example","text":"Below is an example contract deployed on the aquachain at 0xF179C8ec4cE31d8B9f16fA12c88A6091fD06d62a Copy paste this in your browser for live demo (see Return Data: uint256): https://aquachain.github.io/explorer/#/contract/0xF179C8ec4cE31d8B9f16fA12c88A6091fD06d62a/double(int256)/100 It is a simple contract that demonstrates two things: Writing a contract is easy. Just send a transaction containing Data, with no recipient. Add some fuel, and wooo! It's deployed. aqua.sendTransaction({from:aqua.coinbase,data:'6060604052341561000f57600080fd5b60b18061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636ffa1caa146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60008160020290509190505600a165627a7a723058208aa56e39b6d6a9caab4b9a9dc5241ea1c56dd40cf77f1c1e66af80c59fef24640029'}) Writing a secure contract is not easy. Here is a dangerous overflow : (Input: 9999999999999999999999999999999999999999999999999999999999999999999999999999 returns -95792089237316195423570985008687907853269984665640564039457584007913129639938","title":"Simple Example"},{"location":"user-guide/Smart-Contracts/#source-code","text":"The following is buggy code The above contract was made with solidity language, compiled on the Remix browser compiler. pragma solidity ^0.4.18; contract Double { function double(int a) public pure returns(int) { return 2*a;} // buggy } using solc or Remix browser compiler, compiles to bytecode , which is sent in a transaction in the data field (no \"to\" field, or \"zero address\"): 6060604052341561000f57600080fd5b60b18061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636ffa1caa146044575b600080fd5b3415604e57600080fd5b606260048080359060200190919050506078565b6040518082815260200191505060405180910390f35b60008160020290509190505600a165627a7a723058208aa56e39b6d6a9caab4b9a9dc5241ea1c56dd40cf77f1c1e66af80c59fef24640029 and an ABI, to let us know what functions are available. in this case, double(int256) that returns an int256 [ { \"constant\": true, \"inputs\": [ { \"name\": \"a\", \"type\": \"int256\" } ], \"name\": \"double\", \"outputs\": [ { \"name\": \"\", \"type\": \"int256\" } ], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\" } ]","title":"Source Code"},{"location":"user-guide/Storage/","text":"Storage Storing things on the blockchain is forever. It is best to avoid storing data on the blockchain unless you need to for example censorship resistance. Instead, store a hash as reference to a file hosted elsewhere. IPFS \"InterPlanetary File System is a protocol and network designed to create a content-addressable, peer-to-peer method of storing and sharing hypermedia in a distributed file system.\" With IPFS you are able to upload a file, and retrieve it (from somewhere else) using the file's hash. Use the short IPFS \"CID\" on-chain, instead of storing the data directly on-chain. Then, host an IPFS node and your file will be online forever. Services exist that offer IPFS hosting, and some are free.","title":"Storage"},{"location":"user-guide/Storage/#storage","text":"Storing things on the blockchain is forever. It is best to avoid storing data on the blockchain unless you need to for example censorship resistance. Instead, store a hash as reference to a file hosted elsewhere.","title":"Storage"},{"location":"user-guide/Storage/#ipfs","text":"\"InterPlanetary File System is a protocol and network designed to create a content-addressable, peer-to-peer method of storing and sharing hypermedia in a distributed file system.\" With IPFS you are able to upload a file, and retrieve it (from somewhere else) using the file's hash. Use the short IPFS \"CID\" on-chain, instead of storing the data directly on-chain. Then, host an IPFS node and your file will be online forever. Services exist that offer IPFS hosting, and some are free.","title":"IPFS"},{"location":"user-guide/Wallet/","text":"Wallet You need to have a wallet to acquire AQUA. A Wallet provides access to your crypto which live on the AQUA blockchain aka Aquachain. This crypto is only available through your private key. If you lose this secret/private key, there is no way to recover your assets. Please safely store the wallet keys in a secure manner. Anyone with access to your private keys gains access to your crypto and can perform outward transactions. This gave birth to the famous expression \u201cnot your (private) keys, not your crypto\u201d. Note: To safeguard your private keys, its best to use a hardware wallet instead of storing it on your device or paper. Using a hardware wallet is the most secure way of accessing your tokens because your signing key never leave the device. When you're setting up a wallet, be sure to: \u2705 Download and install only the latest version from an official source. \u2705 Follow the setup guide carefully. \u2705 Safely back up your recovery phrases. \u274c NEVER share your recovery phrases with anyone, under any circumstances. \u274c NEVER input your recovery phrase to a website or app, other than your wallet app. Metamask Metamask is a cryptocurrency wallet available for IOS, Android and as a Chrome extension. Once installed, create a new wallet. Make sure to securely backup your private key. Anyone with access to your private keys gains access to your crypto. By default, MetaMask creates a wallet on Ethereum Mainnet network. To use AQUA with MetaMask, you need to add AquaChain network. Go to Settings->Networks->Add a network and fill following fields Network Name: Aquachain Mainnet RPC URL: https://c.onical.org (or yours) Chain ID: 61717561 Symbol: AQUAC (use this to get correct cryptocompare api response) Block Explorer URL: https://aquachain.github.io/explorer/#/ After saving above network information, switch to Aquachain network and you are ready to use MetaMask with AQUA. MetaMask also supports hardware wallets such as Ledger and Trezor. See this guide on how to set up MetaMask to use your hardware wallet. Frame Wallet \"A privacy focused Ethereum wallet that runs natively on macOS, Windows and Linux\" Get here frame.sh and frame releases Configure same as metamask above Full node wallet Advanced mode Such usecases for a full node wallet include: * if you wish to programmatically sending transactions using personal_sendTransaction * if you only want to use wallet through the secure console wallet Both situations require a secure network, and are for advanced users only. Consider using a common wallet. If you use a JSON Keyfile wallet attached to your node, you MUST take safety precautions. It is BETTER to use eth_sendRawTransaction to submit a signed transaction, and keep your key away from your RPC node. Anyone can set up complex private aquachain networks with multiple nodes, some with keys, some without, and transactions will be broadcast to the main network if at least one of the nodes are connected to the \"world\". Consider keeping your signing node \"offline\" if possible, and use personal_signTransaction which returns a signed tx without broadcasting it. You do NOT need a private key to run an aquachain node But, a password-protected JSON keyfile is perfectly safe if kept secured, and securely backed up. The most common issue with this type of wallet is that it can't be easily written down in its current form. Most users will probably want to NOT use this, and instead use a mnemonic phrase. Generating new console wallet A wallet can be generated in three ways from the aquachain command: aquachain.exe account new aquachain.exe paper 10 in the AQUA Console: personal.newAccount() Send a transaction Start a transaction by typing send and press enter (type n or ctrl+c to cancel) Most important commands Check balance with aqua.balance(aqua.coinbase) Check all accounts balances: balance() Send a transaction (easy way): send Also see the Console Cheatsheet and other node-operator-guide resources, since you operate a node. Example: Sending a transaction the hard way Before sending coins, you must unlock the account: personal.unlockAccount(aqua.accounts[0]) This next command will send 2 AQUA from \"account 0\" (first account created) to the typed account below: aqua.sendTransaction({from: aqua.accounts[0], to: '0x3317e8405e75551ec7eeeb3508650e7b349665ff', value:web3.toWei(2,\"aqua\")}); Since its a javascript console, you can do something like this: var destination = '0x3317e8405e75551ec7eeeb3508650e7b349665ff'; aqua.sendTransaction({from: aqua.accounts[0], to: destination, value:web3.toWei(2,\"aqua\")}); Default gas price is 0.1 gwei, if you want to specify a higher gas price you can add it to the tx: var tx = {from: aqua.accounts[0], to: destination, gasPrice: web3.toWei(20, \"gwei\"), value:web3.toWei(2,\"aqua\")}; aqua.sendTransaction(tx); Useful Console Commands (Save time! Press tab twice to auto-complete everything.) balance() aqua.balance(aqua.coinbase) send admin.nodeInfo.enode net.listening net.peerCount admin.peers aqua.coinbase aqua.getBalance(aqua.coinbase) personal aqua.accounts miner.setAquabase(web3.aqua.accounts[0]) miner.setAquabase(\u201c0x0000000000000000000000000000000000000000\u201d) miner.start() miner.stop() miner.hashrate aqua.getBlock(0) aqua.getBlock(\u201clatest\u201d) aqua.blockNumber web3.aqua.getBlock(BLOCK_NUMBER).hash aqua.syncing debug.verbosity(6) // highest logging level, 3 is default Import Private Key If you created a wallet with aquachain.exe paper or aquachain wallet you will have an unprotected private key. To send coins from the account derived from this key, you must import it into the console. to import a private key into the aquachain console: prepare your private key as a simple text file with no spaces . name it anything.txt for example run aquachain.exe account import anything.txt make sure to delete/shred the private key txt file!!! Backup Private Key Running aquachain account list will list all key locations. Simply copy these files and check that directory.","title":"Wallet"},{"location":"user-guide/Wallet/#wallet","text":"You need to have a wallet to acquire AQUA. A Wallet provides access to your crypto which live on the AQUA blockchain aka Aquachain. This crypto is only available through your private key. If you lose this secret/private key, there is no way to recover your assets. Please safely store the wallet keys in a secure manner. Anyone with access to your private keys gains access to your crypto and can perform outward transactions. This gave birth to the famous expression \u201cnot your (private) keys, not your crypto\u201d. Note: To safeguard your private keys, its best to use a hardware wallet instead of storing it on your device or paper. Using a hardware wallet is the most secure way of accessing your tokens because your signing key never leave the device. When you're setting up a wallet, be sure to: \u2705 Download and install only the latest version from an official source. \u2705 Follow the setup guide carefully. \u2705 Safely back up your recovery phrases. \u274c NEVER share your recovery phrases with anyone, under any circumstances. \u274c NEVER input your recovery phrase to a website or app, other than your wallet app.","title":"Wallet"},{"location":"user-guide/Wallet/#metamask","text":"Metamask is a cryptocurrency wallet available for IOS, Android and as a Chrome extension. Once installed, create a new wallet. Make sure to securely backup your private key. Anyone with access to your private keys gains access to your crypto. By default, MetaMask creates a wallet on Ethereum Mainnet network. To use AQUA with MetaMask, you need to add AquaChain network. Go to Settings->Networks->Add a network and fill following fields Network Name: Aquachain Mainnet RPC URL: https://c.onical.org (or yours) Chain ID: 61717561 Symbol: AQUAC (use this to get correct cryptocompare api response) Block Explorer URL: https://aquachain.github.io/explorer/#/ After saving above network information, switch to Aquachain network and you are ready to use MetaMask with AQUA. MetaMask also supports hardware wallets such as Ledger and Trezor. See this guide on how to set up MetaMask to use your hardware wallet.","title":"Metamask"},{"location":"user-guide/Wallet/#frame-wallet","text":"\"A privacy focused Ethereum wallet that runs natively on macOS, Windows and Linux\" Get here frame.sh and frame releases Configure same as metamask above","title":"Frame Wallet"},{"location":"user-guide/Wallet/#full-node-wallet","text":"","title":"Full node wallet"},{"location":"user-guide/Wallet/#advanced-mode","text":"Such usecases for a full node wallet include: * if you wish to programmatically sending transactions using personal_sendTransaction * if you only want to use wallet through the secure console wallet Both situations require a secure network, and are for advanced users only. Consider using a common wallet. If you use a JSON Keyfile wallet attached to your node, you MUST take safety precautions. It is BETTER to use eth_sendRawTransaction to submit a signed transaction, and keep your key away from your RPC node. Anyone can set up complex private aquachain networks with multiple nodes, some with keys, some without, and transactions will be broadcast to the main network if at least one of the nodes are connected to the \"world\". Consider keeping your signing node \"offline\" if possible, and use personal_signTransaction which returns a signed tx without broadcasting it. You do NOT need a private key to run an aquachain node But, a password-protected JSON keyfile is perfectly safe if kept secured, and securely backed up. The most common issue with this type of wallet is that it can't be easily written down in its current form. Most users will probably want to NOT use this, and instead use a mnemonic phrase.","title":"Advanced mode"},{"location":"user-guide/Wallet/#generating-new-console-wallet","text":"A wallet can be generated in three ways from the aquachain command: aquachain.exe account new aquachain.exe paper 10 in the AQUA Console: personal.newAccount()","title":"Generating new console wallet"},{"location":"user-guide/Wallet/#send-a-transaction","text":"Start a transaction by typing send and press enter (type n or ctrl+c to cancel)","title":"Send a transaction"},{"location":"user-guide/Wallet/#most-important-commands","text":"Check balance with aqua.balance(aqua.coinbase) Check all accounts balances: balance() Send a transaction (easy way): send Also see the Console Cheatsheet and other node-operator-guide resources, since you operate a node.","title":"Most important commands"},{"location":"user-guide/Wallet/#example-sending-a-transaction-the-hard-way","text":"Before sending coins, you must unlock the account: personal.unlockAccount(aqua.accounts[0]) This next command will send 2 AQUA from \"account 0\" (first account created) to the typed account below: aqua.sendTransaction({from: aqua.accounts[0], to: '0x3317e8405e75551ec7eeeb3508650e7b349665ff', value:web3.toWei(2,\"aqua\")}); Since its a javascript console, you can do something like this: var destination = '0x3317e8405e75551ec7eeeb3508650e7b349665ff'; aqua.sendTransaction({from: aqua.accounts[0], to: destination, value:web3.toWei(2,\"aqua\")}); Default gas price is 0.1 gwei, if you want to specify a higher gas price you can add it to the tx: var tx = {from: aqua.accounts[0], to: destination, gasPrice: web3.toWei(20, \"gwei\"), value:web3.toWei(2,\"aqua\")}; aqua.sendTransaction(tx);","title":"Example: Sending a transaction the hard way"},{"location":"user-guide/Wallet/#useful-console-commands","text":"(Save time! Press tab twice to auto-complete everything.) balance() aqua.balance(aqua.coinbase) send admin.nodeInfo.enode net.listening net.peerCount admin.peers aqua.coinbase aqua.getBalance(aqua.coinbase) personal aqua.accounts miner.setAquabase(web3.aqua.accounts[0]) miner.setAquabase(\u201c0x0000000000000000000000000000000000000000\u201d) miner.start() miner.stop() miner.hashrate aqua.getBlock(0) aqua.getBlock(\u201clatest\u201d) aqua.blockNumber web3.aqua.getBlock(BLOCK_NUMBER).hash aqua.syncing debug.verbosity(6) // highest logging level, 3 is default","title":"Useful Console Commands"},{"location":"user-guide/Wallet/#import-private-key","text":"If you created a wallet with aquachain.exe paper or aquachain wallet you will have an unprotected private key. To send coins from the account derived from this key, you must import it into the console. to import a private key into the aquachain console: prepare your private key as a simple text file with no spaces . name it anything.txt for example run aquachain.exe account import anything.txt make sure to delete/shred the private key txt file!!!","title":"Import Private Key"},{"location":"user-guide/Wallet/#backup-private-key","text":"Running aquachain account list will list all key locations. Simply copy these files and check that directory.","title":"Backup Private Key"},{"location":"user-guide/Ways-Acquiring/","text":"Getting AQUA Aquachain is powered by fuel, called Aqua. It is created by inserting a new block onto the blockchain in a process known as \"mining\". The reward for mining a block is 1 Aqua. The difficulty is adjusted every block in order to average a four minute interval between blocks. Nothing prevents anybody in the world with enough CPU power from mining a valid block and receiving the reward (1.0 AQUA + all tx fees). Eventually, Block Reward switches to \"transaction fees only\" after 42 million coins. Since around 360 coins are mined per day, this is expected to happen in around 300 years. The current supply can easily be viewed by visiting https://aquacha.in/supply or, from an archive node, admin_supply method ( from console, admin.supply() ) Besides mining , you could accept AQUA as payment for goods or services, or buy from someone who has some. Exchanges include: safe.trade","title":"Getting AQUA"},{"location":"user-guide/Ways-Acquiring/#getting-aqua","text":"Aquachain is powered by fuel, called Aqua. It is created by inserting a new block onto the blockchain in a process known as \"mining\". The reward for mining a block is 1 Aqua. The difficulty is adjusted every block in order to average a four minute interval between blocks. Nothing prevents anybody in the world with enough CPU power from mining a valid block and receiving the reward (1.0 AQUA + all tx fees). Eventually, Block Reward switches to \"transaction fees only\" after 42 million coins. Since around 360 coins are mined per day, this is expected to happen in around 300 years. The current supply can easily be viewed by visiting https://aquacha.in/supply or, from an archive node, admin_supply method ( from console, admin.supply() ) Besides mining , you could accept AQUA as payment for goods or services, or buy from someone who has some. Exchanges include: safe.trade","title":"Getting AQUA"},{"location":"user-guide/Whitepaper/","text":"Whitepaper Specification Current \"Hard Fork Map\" see on github Current whitepaper documents include Hard Fork Constitution link Aquapaper link , based on Ethereum's Yellowpaper","title":"Whitepaper"},{"location":"user-guide/Whitepaper/#whitepaper","text":"","title":"Whitepaper"},{"location":"user-guide/Whitepaper/#specification","text":"Current \"Hard Fork Map\" see on github Current whitepaper documents include Hard Fork Constitution link Aquapaper link , based on Ethereum's Yellowpaper","title":"Specification"},{"location":"user-guide/code-of-conduct/","text":"Article 1. This is the Code of Conduct. Article 2. Anyone advocating or suggesting modifications to this Code of Conduct shall be immediately removed and banished from this organization. Article 3. There is no Article 4 or any other substance to this Code of Conduct beyond this Article, Article 3.","title":"Code of conduct"},{"location":"user-mining-guide/Mining/","text":"Mining Hashrate Benchmarks See #hashrate-reports channel for many more: discord New Mining Software There are many varieties of aquachain mining software. As of this edit, latest is aquaminer-gpu Compiling is easy. git clone --branch linux --recurse-submodules https://github.com/aquachain/aquaminer-gpu cd aquaminer-gpu make ls bin/ Running all the miners are generally the same. The -F flag and then the pool URL, or your node URL if solo mining. Aquachain Miner Resources Network Pool Status Pool mining Choose a pool from those listed on pool status or aquachain.github.io Run the miner with the correct flags, considering making a short script ./aquaminer.exe -F http://<pooladdress>:8888/<address>/<worker> Here replace <address> with your wallet address and <worker> with any custom name for the CPU you are using with your address. Remember multiple workers can be used with a single wallet address and in this case all paid money will go to the same wallet. And swap <pooladdress> for the actual pool host. For CPU, use -t flag for number of cpu (default all) ./aquaminer.exe -F http://pool.aquachain-foundation.org:8888/<address>/<worker> For GPU, use -d flag to choose the OpenCL device number pooladdr='http://pool.whatever:8888/<address>/<worker>' ./aquacppminer-gpu -d 0 -F ${pooladdr} & ./aquacppminer-gpu -d 1 -F ${pooladdr} & Since these are now running in background, use something like \"killall aquacppminer-gpu\" to kill all the miners. Pools These are the currently known pools, edit to add more: pools.json aquachain explorer: pools multipool status Solo mining: Don't solo mine unless you can actually mine blocks once in a while, start at a pool Dont keep your keys on your RPC server Use the -aquabase flag to set coinbase with no private key on server Be sure to wait and sync before mining . It doesn't take long. To reduce orphan blocks, also be sure to have peers and check a block explorer to see the current block number and hash. Do not key any keys inside the \"nokeys\" directory. You can safely delete aquaminingdata and nokeys (make sure you dont keep keys in there!) Run your RPC server like so: aquachain -rpc -rpcaddr 192.168.1.5 -datadir aquaminingdata -keystore nokeys -aquabase 0x3317e8405e75551ec7eeeb3508650e7b349665ff Later, to spend and use the AQUA console, just double click aquachain. This way, you keep your keys safe (in the default keystore dir) and don't mix datadir , this can prevent RPC attacks. Please see the many cases where people have lost their ETH because leaving RPC open for even one minute. Solo farm This assumes your AQUA node will be running from LAN 192.168.1.3, with other workers on the same lan. WORKERS: aquacppminer --solo -F http://192.168.1.3:8543/ Also consider running a pool! open-aquachain-pool and see mining proxy: aquachain-proxy Coinbase This is the address that receives the block reward. The mining node does not need the key. Use the -aquabase flag, or from console: miner.setAquabase('0x.your address..')","title":"Mining"},{"location":"user-mining-guide/Mining/#mining","text":"","title":"Mining"},{"location":"user-mining-guide/Mining/#hashrate-benchmarks","text":"See #hashrate-reports channel for many more: discord","title":"Hashrate Benchmarks"},{"location":"user-mining-guide/Mining/#new-mining-software","text":"There are many varieties of aquachain mining software. As of this edit, latest is aquaminer-gpu Compiling is easy. git clone --branch linux --recurse-submodules https://github.com/aquachain/aquaminer-gpu cd aquaminer-gpu make ls bin/ Running all the miners are generally the same. The -F flag and then the pool URL, or your node URL if solo mining.","title":"New Mining Software"},{"location":"user-mining-guide/Mining/#aquachain-miner-resources","text":"Network Pool Status","title":"Aquachain Miner Resources"},{"location":"user-mining-guide/Mining/#pool-mining","text":"Choose a pool from those listed on pool status or aquachain.github.io Run the miner with the correct flags, considering making a short script ./aquaminer.exe -F http://<pooladdress>:8888/<address>/<worker> Here replace <address> with your wallet address and <worker> with any custom name for the CPU you are using with your address. Remember multiple workers can be used with a single wallet address and in this case all paid money will go to the same wallet. And swap <pooladdress> for the actual pool host. For CPU, use -t flag for number of cpu (default all) ./aquaminer.exe -F http://pool.aquachain-foundation.org:8888/<address>/<worker> For GPU, use -d flag to choose the OpenCL device number pooladdr='http://pool.whatever:8888/<address>/<worker>' ./aquacppminer-gpu -d 0 -F ${pooladdr} & ./aquacppminer-gpu -d 1 -F ${pooladdr} & Since these are now running in background, use something like \"killall aquacppminer-gpu\" to kill all the miners.","title":"Pool mining"},{"location":"user-mining-guide/Mining/#pools","text":"These are the currently known pools, edit to add more: pools.json aquachain explorer: pools multipool status","title":"Pools"},{"location":"user-mining-guide/Mining/#solo-mining","text":"Don't solo mine unless you can actually mine blocks once in a while, start at a pool Dont keep your keys on your RPC server Use the -aquabase flag to set coinbase with no private key on server Be sure to wait and sync before mining . It doesn't take long. To reduce orphan blocks, also be sure to have peers and check a block explorer to see the current block number and hash. Do not key any keys inside the \"nokeys\" directory. You can safely delete aquaminingdata and nokeys (make sure you dont keep keys in there!) Run your RPC server like so: aquachain -rpc -rpcaddr 192.168.1.5 -datadir aquaminingdata -keystore nokeys -aquabase 0x3317e8405e75551ec7eeeb3508650e7b349665ff Later, to spend and use the AQUA console, just double click aquachain. This way, you keep your keys safe (in the default keystore dir) and don't mix datadir , this can prevent RPC attacks. Please see the many cases where people have lost their ETH because leaving RPC open for even one minute.","title":"Solo mining:"},{"location":"user-mining-guide/Mining/#solo-farm","text":"This assumes your AQUA node will be running from LAN 192.168.1.3, with other workers on the same lan. WORKERS: aquacppminer --solo -F http://192.168.1.3:8543/ Also consider running a pool! open-aquachain-pool and see mining proxy: aquachain-proxy Coinbase This is the address that receives the block reward. The mining node does not need the key. Use the -aquabase flag, or from console: miner.setAquabase('0x.your address..')","title":"Solo farm"}]}